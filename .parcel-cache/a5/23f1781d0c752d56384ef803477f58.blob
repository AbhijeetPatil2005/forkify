"use strict";

require("core-js/modules/web.immediate.js");
var model = _interopRequireWildcard(require("./model.js"));
var _config = require("./config.js");
var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));
var _searchView = _interopRequireDefault(require("./views/searchView.js"));
var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));
var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));
var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));
var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// if(module.hot){
//   module.hot.accept();
// }
// NEW API URL
// https://forkify-api.jonas.io

const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;
    _recipeView.default.renderSpinner();

    //0) Update results view to mark selected search result
    _resultsView.default.update(model.getSearchResultsPage());

    // 1)Updating bookmarks view
    _bookmarksView.default.update(model.state.bookmarks);

    // 2) Loading recipe
    await model.loadRecipe(id);

    // 3) Rendering recipe
    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    _recipeView.default.renderError();
    console.error(err);
  }
};
const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner();

    //1) Get Search query
    const query = _searchView.default.getQuery();
    if (!query) return;

    //2)Load Search results
    await model.loadSearchResults(query);

    //3)Render results
    _resultsView.default.render(model.getSearchResultsPage());

    //4)Render initial pagination buttons
    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};
const controlPagination = function (goToPage) {
  //1)Render New results
  _resultsView.default.render(model.getSearchResultsPage(goToPage));

  //2)Render New pagination buttons
  _paginationView.default.render(model.state.search);
};
const controlServings = function (newSevings) {
  // Update the recipe servings (in state)
  model.updateServings(newSevings);

  //Update the recipe view
  _recipeView.default.update(model.state.recipe);
};
const controlAddBookmark = function () {
  //1) Add/remove bookmark
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.deleteBookmark(model.state.recipe.id);

  //2) Update recipe view
  _recipeView.default.update(model.state.recipe);

  //3) Render bookmarks
  _bookmarksView.default.render(model.state.bookmarks);
};
const controlBookmarks = function () {
  _bookmarksView.default.render(model.state.bookmarks);
};
const controlAddRecipe = async function (newRecipe) {
  try {
    //Show loading spinner
    _addRecipeView.default.renderSpinner;

    // Upload the new recipe data
    await model.uploadRecipe(newRecipe);
    console.log(model.state.recipe);

    // Render recipe
    _recipeView.default.render(model.state.recipe);

    // Success message
    _addRecipeView.default.renderMessage();

    //Close form window
    setTimeout(function () {
      _addRecipeView.default.toogleWindow();
    }, _config.MODAL_CLOSE_SEC * 1000);
  } catch (err) {
    console.error(err);
    _addRecipeView.default.renderError(err.message);
  }
};
const init = function () {
  _bookmarksView.default.addHandlerRender(controlBookmarks);
  _recipeView.default.addHandlerRender(controlRecipes);
  _recipeView.default.addHandlerUpdateServings(controlServings);
  _recipeView.default.addHandlerAddBookmark(controlAddBookmark);
  _searchView.default.addHandleSearch(controlSearchResults);
  _paginationView.default.addHandlerClick(controlPagination);
  _addRecipeView.default.addHandlerUpload(controlAddRecipe);
};
init();